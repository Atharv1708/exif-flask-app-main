pipeline {
    agent any

    environment {
        PYTHON = 'C:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python313\\python.exe'  // Path to Python
        VENV_DIR = "${WORKSPACE}\\venv"
    }
    
    stages {
        stage('Install Python') {
            steps {
                script {
                    // Install Python using Bash (assuming Git Bash or WSL is installed)
                    if (isUnix()) {
                        // Linux / macOS
                        sh '''
                            # Check if Python is already installed
                            if ! python3 --version; then
                                echo "Installing Python..."
                                # Update package lists and install Python (for Linux)
                                sudo apt-get update
                                sudo apt-get install python3 python3-pip -y
                            else
                                echo "Python is already installed."
                            fi
                        '''
                    } else {
                        // Windows (using choco or winget)
                        bat '''
                            REM Check if Chocolatey is installed, if not install it
                            choco -v || SETUP_CHOCOLATEY=1

                            REM Install Python using Chocolatey if not installed
                            IF %SETUP_CHOCOLATEY%==1 choco install python -y

                            REM Or use winget if choco is unavailable
                            IF NOT EXIST "C:\\Program Files\\Python" winget install Python.Python.3.13
                        '''
                    }
                }
            }
        }

        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Setup Python Environment') {
            steps {
                bat """
                    IF EXIST "${VENV_DIR}" (
                        rmdir /s /q "${VENV_DIR}"
                    )
                    "${PYTHON}" -m venv "${VENV_DIR}"
                """
            }
        }

        stage('Install Dependencies') {
            steps {
                bat """
                    call "${VENV_DIR}\\Scripts\\activate"
                    pip install --upgrade pip
                    pip install -r requirements.txt
                """
            }
        }

        stage('Run Tests') {
            steps {
                bat """
                    call "${VENV_DIR}\\Scripts\\activate"
                    pytest tests/ --junitxml=test-results.xml
                """
            }
            post {
                always {
                    junit 'test-results.xml'
                }
            }
        }

        stage('Run Application') {
            steps {
                bat """
                    call "${VENV_DIR}\\Scripts\\activate"
                    start "" "flask run --host=0.0.0.0 --port=5001"
                """
                // Wait for Flask to start (adjust sleep time as needed)
                sleep 10
            }
        }
    }

    post {
        always {
            // Clean up processes
            bat 'taskkill /F /IM python.exe /T 2>nul || exit 0'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
