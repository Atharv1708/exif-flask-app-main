pipeline {
    agent any

    environment {
        PYTHON = 'C:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python313\\python.exe'
        VENV_DIR = "${WORKSPACE}\\venv"
        FLASK_URL = "http://localhost:5000"
        FLASK_APP = "app.py"
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Setup Environment') {
            steps {
                bat """
                    IF EXIST "${env.VENV_DIR}" (
                        rmdir /s /q "${env.VENV_DIR}"
                    )
                    "${env.PYTHON}" -m venv "${env.VENV_DIR}"
                    call "${env.VENV_DIR}\\Scripts\\activate"
                    python -m pip install --upgrade pip
                    pip install -r requirements.txt requests
                """
            }
        }

        stage('Run Tests') {
            steps {
                bat """
                    call "${env.VENV_DIR}\\Scripts\\activate"
                    python -m pytest tests/test_app.py --junitxml=test-results.xml
                """
            }
            post {
                always {
                    junit 'test-results.xml'
                }
            }
        }

        stage('Verify HTML Hosting') {
            steps {
                script {
                    try {
                        // Start Flask server in a way that Jenkins can track it
                        bat """
                            call "${env.VENV_DIR}\\Scripts\\activate"
                            python ${env.FLASK_APP} &
                            echo $! > flask_pid.txt
                        """
                        
                        // Get the process ID
                        flask_pid = readFile('flask_pid.txt').trim()
                        
                        // Wait for server to start (up to 30 seconds)
                        def ready = false
                        def attempts = 0
                        while (!ready && attempts < 30) {
                            attempts++
                            sleep time: 1, unit: 'SECONDS'
                            try {
                                response = bat(
                                    script: """
                                        call "${env.VENV_DIR}\\Scripts\\activate"
                                        python -c "import requests; r = requests.get('${env.FLASK_URL}', timeout=5); assert r.status_code == 200; assert 'File Metadata Extractor' in r.text"
                                    """,
                                    returnStatus: true
                                )
                                if (response == 0) {
                                    ready = true
                                    echo "HTML hosting verification successful"
                                }
                            } catch (Exception e) {
                                echo "Attempt ${attempts}: Server not ready yet..."
                            }
                        }
                        
                        if (!ready) {
                            error("Flask server did not become ready within 30 seconds")
                        }
                    } catch (Exception e) {
                        error("HTML hosting verification failed: ${e.getMessage()}")
                    } finally {
                        // Stop Flask server
                        bat """
                            taskkill /F /PID ${flask_pid} 2>nul || exit 0
                            del flask_pid.txt 2>nul || exit 0
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            // Final cleanup
            bat 'taskkill /F /IM python.exe /T 2>nul || exit 0'
            cleanWs()
            
            script {
                if (currentBuild.result == 'SUCCESS') {
                    echo "Pipeline succeeded! App is running at ${env.FLASK_URL}"
                } else {
                    echo "Pipeline failed. Check console output for details."
                }
            }
        }
    }
}
