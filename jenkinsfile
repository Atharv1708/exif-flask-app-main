pipeline {
    agent any

    environment {
        PYTHON = 'C:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python313\\python.exe'
        VENV_DIR = "${WORKSPACE}\\venv"
        DOCKER_IMAGE = "yourrepo/exif-flask-app:${env.BUILD_ID}"
    }
    
    stages {
        // CI Stages
        stage('Checkout') {
            steps { checkout scm }
        }

        stage('Setup') {
            steps {
                bat """
                    "${PYTHON}" -m venv "${VENV_DIR}"
                    call "${VENV_DIR}\\Scripts\\activate"
                    pip install -r requirements.txt
                """
            }
        }

        // CT Stages
        stage('Test') {
            steps {
                bat """
                    call "${VENV_DIR}\\Scripts\\activate"
                    pytest tests/ --junitxml=test-results.xml --cov=.
                """
            }
            post {
                always { junit 'test-results.xml' }
            }
        }

        // CD Stages
        stage('Build Docker') {
            when { branch 'main' }
            steps {
                script {
                    docker.build(DOCKER_IMAGE)
                }
            }
        }

        stage('Deploy to Staging') {
            when { branch 'main' }
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-creds') {
                        docker.image(DOCKER_IMAGE).push()
                    }
                    // Add your deployment commands here
                    // Example: kubectl apply -f k8s/staging.yaml
                }
            }
        }

        stage('Deploy to Production') {
            when { 
                branch 'main'
                beforeInput true
            }
            input {
                message "Deploy to production?"
                ok "Deploy"
            }
            steps {
                script {
                    // Add production deployment commands
                    // Example: kubectl apply -f k8s/production.yaml
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            script {
                currentBuild.result = currentBuild.result ?: 'SUCCESS'
            }
        }
    }
}
