pipeline {
    agent any

    environment {
        PYTHON = 'C:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python313\\python.exe'
        VENV_DIR = "${WORKSPACE}\\venv"
        FLASK_URL = "http://localhost:5001"
        UPLOAD_FOLDER = "${WORKSPACE}\\uploads"
        DOCKER_IMAGE = "exif-flask-app"
        DOCKER_CONTAINER = "exif_flask_test"
    }

    stages {
        stage('Prepare Environment') {
            steps {
                bat """
                    IF NOT EXIST "${env.UPLOAD_FOLDER}" (
                        mkdir "${env.UPLOAD_FOLDER}"
                    )
                """
            }
        }

        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Setup Python Environment') {
            steps {
                bat """
                    IF EXIST "${env.VENV_DIR}" (
                        rmdir /s /q "${env.VENV_DIR}"
                    )
                    "${env.PYTHON}" -m venv "${env.VENV_DIR}"
                    call "${env.VENV_DIR}\\Scripts\\activate"
                    python -m pip install --upgrade pip
                    pip install -r requirements.txt requests
                """
            }
        }

        stage('Run Python Tests') {
            steps {
                bat """
                    call "${env.VENV_DIR}\\Scripts\\activate"
                    set UPLOAD_FOLDER=${env.UPLOAD_FOLDER}
                    python -m pytest tests/test_app.py --junitxml=test-results.xml
                """
            }
            post {
                always {
                    junit 'test-results.xml'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${env.DOCKER_IMAGE}")
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                bat """
                    docker rm -f ${env.DOCKER_CONTAINER} || exit 0
                    docker run -d -p 5001:5001 --name ${env.DOCKER_CONTAINER} ${env.DOCKER_IMAGE}
                """
                sleep time: 5, unit: 'SECONDS'
            }
        }

       stage('Verify HTML Hosting (Docker)') {
    steps {
        script {
            def ready = false
            def attempts = 0
            def maxAttempts = 30
            def waitTime = 2 // seconds
            
            while (!ready && attempts < maxAttempts) {
                try {
                    // Get container logs to help debugging
                    def logs = bat(script: "docker logs ${env.DOCKER_CONTAINER}", returnStdout: true).trim()
                    echo "Container logs:\n${logs}"
                    
                    // Check HTTP status
                    def status = bat(
                        script: "curl -s -o NUL -w \"%%{http_code}\" ${env.FLASK_URL} || echo 000",
                        returnStdout: true
                    ).trim()
                    
                    echo "Attempt ${attempts + 1}/${maxAttempts}: HTTP status ${status}"
                    
                    if (status == "200") {
                        ready = true
                        echo "Application is ready and serving requests"
                    } else {
                        attempts++
                        sleep time: waitTime, unit: 'SECONDS'
                    }
                } catch (Exception e) {
                    attempts++
                    echo "Attempt ${attempts}/${maxAttempts} failed: ${e.getMessage()}"
                    sleep time: waitTime, unit: 'SECONDS'
                }
            }
            
            if (!ready) {
                // Get final logs before failing
                def finalLogs = bat(script: "docker logs ${env.DOCKER_CONTAINER}", returnStdout: true).trim()
                error("Application failed to start within timeout. Final logs:\n${finalLogs}")
            }
        }
    }
}

    post {
        always {
            bat "docker rm -f ${env.DOCKER_CONTAINER} || exit 0"
            bat 'taskkill /F /IM python.exe /T 2>nul || exit 0'
            cleanWs()
        }
    }
}
