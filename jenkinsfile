pipeline {
    agent any

    environment {
        PYTHON = 'C:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python313\\python.exe'
        VENV_DIR = "${WORKSPACE}\\venv"
        FLASK_URL = "http://localhost:5001"
        UPLOAD_FOLDER = "${WORKSPACE}\\uploads"
    }
    
    stages {
        stage('Prepare Environment') {
            steps {
                bat """
                    IF NOT EXIST "${env.UPLOAD_FOLDER}" (
                        mkdir "${env.UPLOAD_FOLDER}"
                    )
                """
            }
        }

        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Setup Environment') {
            steps {
                bat """
                    IF EXIST "${env.VENV_DIR}" (
                        rmdir /s /q "${env.VENV_DIR}"
                    )
                    "${env.PYTHON}" -m venv "${env.VENV_DIR}"
                    call "${env.VENV_DIR}\\Scripts\\activate"
                    python -m pip install --upgrade pip
                    pip install -r requirements.txt requests
                """
            }
        }

        stage('Run Tests') {
            steps {
                bat """
                    call "${env.VENV_DIR}\\Scripts\\activate"
                    set UPLOAD_FOLDER=${env.UPLOAD_FOLDER}
                    python -m pytest tests/test_app.py --junitxml=test-results.xml
                """
            }
            post {
                always {
                    junit 'test-results.xml'
                }
            }
        }

        stage('Verify HTML Hosting') {
            steps {
                script {
                    try {
                        // Start Flask with explicit upload folder
                        bat """
                            call "${env.VENV_DIR}\\Scripts\\activate"
                            set UPLOAD_FOLDER=${env.UPLOAD_FOLDER}
                            python app.py &
                            echo %^! > flask_pid.txt
                        """
                        
                        flask_pid = readFile('flask_pid.txt').trim()
                        
                        // Wait for server with retries
                        def ready = false
                        def attempts = 0
                        while (!ready && attempts < 30) {
                            attempts++
                            sleep time: 1, unit: 'SECONDS'
                            response = bat(
                                script: """
                                    call "${env.VENV_DIR}\\Scripts\\activate"
                                    python -c "import requests; r = requests.get('${env.FLASK_URL}', timeout=5); assert r.status_code == 200; assert 'File Metadata Extractor' in r.text"
                                """,
                                returnStatus: true
                            )
                            if (response == 0) {
                                ready = true
                                echo "HTML verification successful"
                            }
                        }
                        if (!ready) error("Server didn't start in 30 seconds")
                    } finally {
                        bat """
                            for /f "tokens=1" %%i in (flask_pid.txt) do taskkill /PID %%i /F
                            del flask_pid.txt 2>nul || exit 0
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            bat 'taskkill /F /IM python.exe /T 2>nul || exit 0'
            cleanWs()
        }
    }
}
