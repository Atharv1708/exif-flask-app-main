pipeline {
    agent any

    environment {
        PYTHON = 'C:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python313\\python.exe'
        VENV_DIR = "${WORKSPACE}\\venv"
        FLASK_URL = "http://localhost:5001"
        UPLOAD_FOLDER = "${WORKSPACE}\\uploads"
        DOCKER_IMAGE = "exif-flask-app"
        DOCKER_CONTAINER = "exif_flask_test"
    }

    stages {
        stage('Prepare Environment') {
            steps {
                bat """
                    IF NOT EXIST "${env.UPLOAD_FOLDER}" (
                        mkdir "${env.UPLOAD_FOLDER}"
                    )
                """
            }
        }

        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Setup Python Environment') {
            steps {
                bat """
                    IF EXIST "${env.VENV_DIR}" (
                        rmdir /s /q "${env.VENV_DIR}"
                    )
                    "${env.PYTHON}" -m venv "${env.VENV_DIR}"
                    call "${env.VENV_DIR}\\Scripts\\activate"
                    python -m pip install --upgrade pip
                    pip install -r requirements.txt requests
                """
            }
        }

        stage('Run Python Tests') {
            steps {
                bat """
                    call "${env.VENV_DIR}\\Scripts\\activate"
                    set UPLOAD_FOLDER=${env.UPLOAD_FOLDER}
                    python -m pytest tests/test_app.py --junitxml=test-results.xml
                """
            }
            post {
                always {
                    junit 'test-results.xml'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${env.DOCKER_IMAGE}")
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    sh "docker rm -f ${env.DOCKER_CONTAINER} || true"
                    dockerImage.run("-d -p 5001:5001 --name ${env.DOCKER_CONTAINER}")
                    sleep 5  // wait for container to start
                }
            }
        }

        stage('Verify HTML Hosting (Docker)') {
            steps {
                script {
                    def attempts = 0
                    def ready = false
                    while (!ready && attempts < 30) {
                        def response = sh (
                            script: "curl -s -o /dev/null -w \"%{http_code}\" ${env.FLASK_URL}",
                            returnStdout: true
                        ).trim()
                        if (response == "200") {
                            ready = true
                            echo "Flask app is running inside Docker!"
                        } else {
                            attempts++
                            sleep time: 2, unit: 'SECONDS'
                        }
                    }
                    if (!ready) {
                        error("Docker Flask app did not become ready in time.")
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // Kill Flask Docker container if it's running
                sh "docker rm -f ${env.DOCKER_CONTAINER} || true"
            }

            // Kill any leftover local Python processes (if any)
            bat 'taskkill /F /IM python.exe /T 2>nul || exit 0'

            // Cleanup Jenkins workspace
            cleanWs()
        }
    }
}
